#include <pthread.h>
int pthread_equal(pthread_t tid1, pthread_t tid2);
返回值：若相等，返回非0数值；否则，返回0
#include <pthread.h>
pthread_t pthread_self(void);
返回值：调用线程的线程ID

#include <pthread.h>
int pthread_create(pthread_t *restrict tidp, const pthread_attr_t *restrict attr, void *(*start_rtn)(void *), void *restrict arg);
返回值：若成功，返回0；否则，返回错误编号

#include <pthread.h>
void pthread_exit(void *rval_ptr);
#include <pthread.h>
int pthread_join(pthread_t thread, void **rval_ptr);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_cancel(pthread_t tid);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
void pthread_cleanup_push(void (*rtn)(void *), void *arg);
void pthread_cleanup_pop(int execute);
#include <pthread.h>
int pthread_detach(pthread_t tid);
返回值：若成功，返回0；否则，返回错误编号

#include <pthread.h>
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
所有函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
#include <time.h>
int pthread_mutex_timedlock(pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
所有函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
#include <time.h>
int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict tsptr);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict tsptr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_cond_init(pthread_cond_t *restrict cond, const struct pthread_condattr_t *restrict attr);
int pthread_cond_destroy(pthread_cond_t *cond);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_broadcast(pthread_cond_t *cond);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_spin_init(pthread_spinlock_t *lock, int pshared);
int pthread_spin_destroy(pthread_spinlock_t *lock);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_spin_lock(pthread_spinlock_t *lock);
int pthread_spin_trylock(pthread_spinlock_t *lock);
int pthread_spin_unlock(pthread_spinlock_t *lock);
所有函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_barrier_init(pthread_barrier_t *restrict barrier, const pthread_barrierattr_t *restirct attr, unsigned int count);
int pthread_barrier_destroy(pthread_barrier_t *barrier);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_barrier_wait(pthread_barrier_t *barrier);
返回值：若成功，返回0或者PTHREAD_BARRIER_SERAIL_THREAD；否则，返回错误编号
