#include <stdio.h>
#include <wchar.h>
int fwide(FILE *fp, int mode);
返回值：若流是宽定向的，返回正值；若流是字节定向的，返回负值；若流是未定向的，返回0
根据mode参数的不同值，fwide函数执行不同的工作。
如若mode参数值为负，fwide将试图使指定的流是字节定向的。
如若mode参数值为正，fwide将试图使指定的流是宽定向的。
如若mode参数值为0，fwide将不试图设置流的定向，但返回标识该流定向的值。
#include <stdio.h>
void setbuf(FILE *restrict fp, char *restrict buf);
int setvbuf(FILE *restrict fp, char *restrict buf, int mode, size_t size);
返回值：若成功，返回0；若出错，返回非0
为了带缓冲进行I/O，参数buf必须指向长度为BUFSIZ的缓冲区(该常量定义在<stdio.h>中)。通常在此之后该流就是全缓冲的，但是如果该流与一个终端设备相关，那么某些系统也可将其设置为行缓冲的。为了关闭缓冲，将buf设置为NULL。
使用setvbuf，我们可以精确地说明所需的缓冲类型。这是用mode参数实现的：
_IOFBF 全缓冲
_IOLBF 行缓冲
_IONBF 不带缓冲
如果指定一个不带缓冲的流，则忽略buf和size参数。如果指定全缓冲或行缓冲，则buf和size可选择地指定一个缓冲区及其长度。如果该流是带缓冲的，而buf是NULL，则标准I/O库将自动地为该流分配适当长度的缓冲区。适当长度指的是由常量BUFSIZ所指定的值。
函数     mode    buf     缓冲区及长度                 缓冲类型
setbuf           非空    长度为BUFSIZ的用户缓冲区buf  全缓冲或行缓冲
                 NULL    (无缓冲区)                   不带缓冲
setvbuf  _IOFBF  非空    长度为size的用户缓冲区buf    全缓冲
                 NULL    合适长度的系统缓冲区buf      
         _IOLBF  非空    长度为size的用户缓冲区buf    行缓冲
                 NULL    合适长度的系统缓冲区buf      
         _IONBE  (忽略)  (无缓冲区)                   不带缓冲
setbuf和setvbuf函数
#include <stdio.h>
int fflush(FILE *fp);
返回值：若成功，返回0；若出错，返回EOF
此函数使该流所有未写的数据都被传送至内核。作为一种特殊情形，如若fp是NULL，则此函数将导致所有输出流被冲洗。
#include <stdio.h>
FILE *fopen(const char *restrict pathname, const char *restrict type);
FILE *freopen(const char *restrict pathname, const char *restrict type, FILE *restrict fp);
FILE *fdopen(int fd, const char *type);
3个函数的返回值：若成功，返回文件指针；若出错，返回NULL
pathname：路径名
type：指定对该I/O流的读、写方式
type          说明                                    open(2)标志
r或rb         为读而打开                              O_RDONLY
w或wb         把文件截断至0长，或为写而创建           O_WRONLY|O_CREAT|O_TRUNC
a或ab         追加：为在文件尾写而打开，或为写而创建  O_WRONLY|O_CREAT|O_APPEND
r+或r+b或rb+  为读和写而打开                          O_RDWR
w+或w+b或wb+  把文件截断至0长，或为读和写而打开       O_RDWR|O_CREAT|O_TRUNC
a+或a+b或ab+  为在文件尾读和写而打开或创建            O_RDWR|O_CREAT|O_APPEND
打开标准I/O流的type参数
使用字符b作为type的一部分使得标准I/O系统可以区分文本文件和二进制文件，因为UNIX内核不区分这两种文件，所以在UNIX系统环境下指定字符b作为type的一部分实际上并无作用。
对于fdopen，type参数的意义稍有区别。因为该描述符已被打开，所以fdopen为写而打开并不截断该文件。另外，追加写方式也不能用于创建该文件。
当以读和写类型打开一个文件时type中+号，具有下列限制。
如果中间没有fflush、fseek、fsetpos或rewind，则在输出的后面不能直接跟随输入。
如果中间没有fseek、fsetpos或rewind，或者一个输入操作没有到达文件尾端，则在输入操作之后不能直接跟随输出。
限制                r  w  a  r+  w+  a+
文件必须已存在      .        .         
放弃文件以前的内容     .         .     
流可以读            .        .   .   . 
流可以写               .  .  .   .   . 
流只可在尾端处写          .          . 
打开一个标准I/O流的6种不同方式
注意，在指定w或a类型创建一个新文件时，我们无法说明该文件的访问权限位。POSIX.1要求实现使用如下的权限位集来创建文件：
S_IRUSR | S_IWUSR | SIRGRP | S_IWGRP | S_IROTH | S_IWOTH
#include <stdio.h>
int fclose(FTLE *p);
返回值：若成功，返回0；若出错，返回EOF

#include <stdio.h>
int getc(FILE *fp);
int fgetc(FILE *fp);
int getchar(void);
3个函数的返回值：若成功，返回下一个字符；若已到达文件尾端或出错，返回EOF
getchar = getc(stdin)
注意，不管是出错还是到达文件尾端，这3个函数都返回同样的值。为了区分这两种不同的情况，必须调用ferror或feof。
#include <stdio.h>
int ferror(FILE *fp);
int feof(FILE *fp);
两个函数返回值：若条件为真，返回非0(真)；否则，返回0(假)
void clearerr(FILE *fp);
#include <stdio.h>
int ungetc(int c, FILE *fp);
返回值：若成功，返回c；若出错，返回EOF
#include <stdio.h>
int putc(int c, FILE *fp);
int fputc(int c, FILE *fp);
int putchar(int c);
3个函数返回值：若成功，返回c；若出错，返回EOF
putchar(c) = putc(c, stdout)

#include <stdio.h>
char *fgets(char *restrict buf, int n, FILE *restrict fp);
char *gets(char *buf);
两个函数返回值：若成功，返回buf；若已到达文件尾端或出错，返回NULL
不推荐使用gets函数。gets不将换行符存入缓冲区。
#include <stdio.h>
int fputs(const char *restrict str, FILE *restrict fp);
int puts(const char *str);
两个函数返回值：若成功，返回非负值；若出错，返回EOF
避免使用puts。
使用fgets和fputs在每行终止处必须处理换行符。

#include <stdio.h>
size_t fread(void *restrict ptr, size_t size, size_t nobj, FILE *restrict fp);
size_t fwrite(const void *restrict ptr, size_t size, size_t nobj, FILE *restrict fp);
两个函数的返回值：读或写的对象数

#include <stdio.h>
long ftell(FILE *fp);
返回值：若成功，返回当前文件位置指示；若出错，返回-1L
int fseek(FILE *fp, long offset, int whence);
返回值：若成功，返回0；若出错，返回-1
void rewind(FILE *fp);
#include <stdio.h>
off_t ftello(FILE *fp);
返回值：若成功，返回当前文件位置；若出错，返回(off_t)-1
int fseeko(FILE *fp, off_t offset, int whence);
返回值：若成功，返回0；若出错，返回-1
#include <stdio.h>
int fgetpos(FILE *restrict fp, fpos_t *restrict pos);
int fsetpos(FILE *fp, const fpos_t *pos);
两个函数返回值：若成功，返回0；若出错，返回非0

#include <stdio.h>
int printf(const char *restrict format, ...);
int fprintf(FILE *restrict fp, const char *restrict format, ...);
int dprintf(int fd, const char *restrict format, ...);
3个函数返回值：若成功，返回输出字符数；若输出出错，返回负值
int sprintf(char *restrict buf, const char *restrict format, ...);
返回值：若成功，返回存入数组的字符数；若编码出错，返回负值
int snprintf(char *restrict buf, size_t n, const char *restrict format, ...);
返回值：若缓冲区足够大，返回将要存入数组的字符数；若编码出错，返回负值
#include <stdarg.h>
#include <stdio.h>
int vprintf(const char *restrict format, va_list arg);
int vfprintf(FILE *restrict fp, const char *restrict format, va_list arg);
int vdprintf(int fd, const char *restrict format, va_list arg);
所有3个函数返回值：若成功，返回输出字符数；若输出出错，返回负值
int vsprintf(char *restrict buf, const char *restrict format, va_list arg);
函数返回值：若成功，返回存入数组的字符数；若编码出错，返回负值
int vsnprintf(char *restrict buf, size_t n, const char *restrict format, va_list arg);
函数返回值：若缓冲区足够大，返回将要存入数组的字符数；若编码出错，返回负值
#include <stdio.h>
int scanf(const char *restrict format, ...);
int fscanf(FILE *restrict fp, const char *restrict format, ...);
int sscanf(const char *restrict buf, const char *restrict format, ...);
3个函数返回值：赋值的输入项数；若输入出错或在任一转换前已到达文件尾端，返回EOF
#include <stdio.h>
int vscanf(const char *restrict format, va_list arg);
int vfscanf(FILE *restrict fp, const char *restrict format, va_list arg);
int vsscanf(const char *restrict buf, const char *restrict format, va_list arg);
3个函数返回值：指定的输入项目数；若输入出错或在任一转换前文件结束，返回EOF

#include <stdio.h>
int fileno(FILE *fp);
返回值：与该流相关联的文件描述符

#include <stdio.h>
char *tmpnam(char *ptr);
返回值：指向唯一路径名的指针
FILE *tmpfile(void);
返回值：若成功，返回文件指针；若出错，返回NULL

#include <stdlib.h>
char *mkdtemp(char *template);
返回值：若成功，返回指向目录名的指针；若出错，返回NULL
int mkstemp(char *template);
返回值：若成功，返回文件描述符；若出错，返回-1

#include <stdio.h>
FILE *fmemopen(void *restrict buf, size_t size, const char *restrict type);
返回值：若成功，返回流指针；若错误，返回NULL
#include <stdio.h>
FILE *open_memstream(char **bufp, size_t *sizep);
#include <wchar.h>
FILE *open_wmemstream(wchar_t **bufp, size_t *sizep);
两个函数的返回值：若成功，返回流指针；若出错，返回NULL
