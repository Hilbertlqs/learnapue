5.1
$ ./my_setbuf 
enter any character

one line to standard error
stream = stdin, fully buffered, buffer size = 1024
stream = stdout, fully buffered, buffer size = 1024
stream = stderr, unbuffered, buffer size = 1
stream = /etc/passwd, fully buffered, buffer size = 4096
$ ./my_setbuf < /etc/group > std.out 2> std.err
$ cat std.err 
one line to standard error
$ cat std.out 
enter any character
stream = stdin, fully buffered, buffer size = 4096
stream = stdout, fully buffered, buffer size = 4096
stream = stderr, unbuffered, buffer size = 1
stream = /etc/passwd, fully buffered, buffer size = 4096

5.2
fgets函数读入数据，直到行结束或缓冲区满(当然会留出一个字节存放终止null字节)。同样，fputs只负责将缓冲区的内容输出直到遇到一个null字节，而并不考缓冲区中是否包含换行符。所以，如果将MAXLINE设得很小，这两个函数仍然会正常工作；只不过在缓冲区较大时，函数被执行的次数要多于MAXLINE值设置得较大的时候。
如果这些函数删除或添加换行符(如gets和puts函数的操作)，则必须保证对于最长的行，缓冲区也足够大。

5.3
当printf没有输出任何字符时，如printf("");，函数调用返回0。

5.4
这是一个比较常见的错误。getc以及getchar的返回值是int类型，而不是char类型。由于EOF经常定义为-1，那么如果系统使用的是有符号的字符类型，程序还可以正常工作。但如果使用的是无符号字符类型，那么返回的EOF被保存到字符c后将不再是-1，所以，程序会进入死循环。本书说明的4种平台都使用带符号字符，所以实例代码都能工作。

5.5
使用方法为：先调用fflush后调用fsync。fsync所使用的参数由fileno函数获得。如果不调用fflush，所有的数据仍然在内存缓冲区中，此时调用fsync将没有任何效果。

5.6
当程序交互运行时，标准输入和标准输出均为行缓冲方式。每次调用fgets时标准输出设备将自动冲洗。

5.7
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

struct memstream {
    char *buf;
    size_t rsize;
    size_t vsize;
    size_t curpos;
    int flags;
};

#define MS_READ     0x01
#define MS_WRITE    0x02
#define MS_APPEND   0x04
#define MS_TRUNCATE 0x08
#define MS_MYBUF    0x10

#ifndef MIN
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#endif

static int mstream_read(void *cookie, char *buf, int len);
static int mstream_write(void *cookie, const char *buf, int len);
static fpos_t mstream_seek(void *cookie, fpos_t pos, int whence);
static int mstream_close(void *cookie);
static int type_to_flags(const char *__restrict type);
static off_t find_end(char *buf, size_t len);

FILE *fmemopen(void *__restrict buf, size_t size, const char *__restrict type)
{
    struct memstream *ms;
    FILE *fp;

    if (size == 0) {
        errno = EINVAL;
        return NULL;
    }
    if ((ms = malloc(sizeof(struct memstream))) == NULL) {
        errno = ENOMEM;
        return NULL;
    }
    if ((ms->flags = type_to_flags(type)) == 0) {
        errno = EINVAL;
        free(ms);
        return NULL;
    }
    if (buf == NULL) {
        if ((ms->flags & (MS_READ | MS_WRITE)) != (MS_READ | MS_WRITE)) {
            errno = EINVAL;
            free(ms);
            return NULL;
        }
        if ((ms->buf = malloc(size)) == NULL) {
            errno = ENOMEM;
            free(ms);
            return NULL;
        }
        ms->rsize = size;
        ms->flags |= MS_MYBUF;
        ms->curpos = 0;
    } else {
        ms->buf = buf;
        ms->rsize = size;
        if (ms->flags & MS_APPEND)
            ms->curpos = find_end(ms->buf, ms->rsize);
        else
            ms->curpos = 0;
    }
    if (ms->flags & MS_APPEND)
        ms->vsize = ms->curpos;
    else if (ms->flags & MS_TRUNCATE)
        ms->vsize = 0;
    else
        ms->vsize = size;
    fp = funopen(ms, mstream_read, mstream_write, mstream_seek, mstream_close);
    if (fp == NULL) {
        if (ms->flags & MS_MYBUF)
            free(ms->buf);
        free(ms);
    }
    return fp;
}

static int type_to_flags(const char *__restrict type)
{
    const char *cp;
    int flags = 0;

    for (cp = type; *cp != 0; cp++) {
        switch (*cp) {
        case 'r':
            if (flags != 0)
                return 0;
            flags |= MS_READ;
            break;

        case 'w':
            if (flags != 0)
                return 0;
            flags |= MS_WRITE | MS_TRUNCATE;
            break;

        case 'a':
            if (flags != 0)
                return 0;
            flags |= MS_APPEND;
            break;

        case '+':
            if (flags == 0)
                return 0;
            flags |= MS_READ | MS_WRITE;
            break;

        case 'b':
            if (flags == 0)
                return 0;
            break;
        default:
            return 0;
        }
    }
    return flags;
}

static off_t find_end(char *buf, size_t len)
{
    off_t off = 0;

    while (off < len) {
        if (buf[off] == 0)
            break;
        off++;
    }
    return off;
}

static int mstream_read(void *cookie, char *buf, int len)
{
    int nr;
    struct memstream *ms = cookie;

    if (!(ms->flags & MS_READ)) {
        errno = EBADF;
        return -1;
    }
    if (ms->curpos >= ms->vsize)
        return 0;

    nr = MIN(len, ms->vsize - ms->curpos);
    memcpy(buf, ms->buf + ms->curpos, nr);
    ms->curpos += nr;
    return nr;
}

static int mstream_write(void *cookie, const char *buf, int len)
{
    int nw, off;
    struct memstream *ms = cookie;

    if (!(ms->flags & (MS_APPEND | MS_WRITE))) {
        errno = EBADF;
        return -1;
    }
    if (ms->flags & MS_APPEND)
        off = ms->vsize;
    else
        off = ms->curpos;
    nw = MIN(len, ms->rsize - off);
    memcpy(ms->buf + off, buf, nw);
    ms->curpos = off + nw;
    if (ms->curpos > ms->vsize) {
        ms->vsize = ms->curpos;
        if (((ms->flags & (MS_READ | MS_WRITE)) == (MS_READ | MS_WRITE)) && (ms->vsize < ms->rsize))
            *(ms->buf + ms->vsize) = 0;
    }
    if ((ms->flags & (MS_WRITE | MS_APPEND)) && !(ms->flags & MS_READ)) {
        if (ms->curpos < ms->rsize)
            *(ms->buf + ms->curpos) = 0;
        else
            *(ms->buf + ms->rsize - 1) = 0;
    }
    return nw;
}

static fpos_t mstream_seek(void *cookie, fpos_t pos, int whence)
{
    int off;
    struct memstream *ms = cookie;

    switch (whence) {
    case SEEK_SET:
        off = pos;
        break;
    case SEEK_END:
        off = ms->vsize + pos;
        break;
    case SEEK_CUR:
        off = ms->curpos + pos;
        break;
    }
    if (off < 0 || off > ms->vsize) {
        errno = EINVAL;
        return -1;
    }
    ms->curpos = off;
    return off;
}

static int mstream_close(void *cookie)
{
    struct memstream *ms = cookie;

    if (ms->flags & MS_MYBUF)
        free(ms->buf);
    free(ms);
    return 0;
}
