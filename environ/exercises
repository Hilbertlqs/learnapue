7.1
$ ./hello1 
hello, world
$ echo $?
13
printf的返回值(输出的字符数)变成了main函数的返回值。

7.2
当程序处于交互运行方式时，标准输出通常处于行缓冲方式，所以当输出换行符时，上次的结果才被真正输出。如果标准输出被定向到一个文件，而标准输出处于全缓冲方式，则当标准I/O清理操作执行时，结果才真正被输出。

7.3
由于argc和argv的副本不像environ一样保存在全局变量中，所以在大多数UNIX系统中没有其他办法。

7.4
当C程序解引用一个空指针出错时，执行该程序的进程将终止。可以利用这种方法终止进程。

7.5
typedef void Exitfunc(void);
int atexit(Exitfunc *func);

7.6
calloc将分配的内存空间初始化为0。但是ISO C并不保证0值与浮点0或空指针的值相同。

7.7
只有通过exec函数执行一个程序时，才会分配堆和栈。

7.8
可执行文件(a.out)包含了用于调试core文件的符号表信息。用strip(1)命令可以删除这些信息，对两个a.out文件执行这条命令，它们的大小减为798760(871896->798480)和6200(16696->14472)字节。
$ gcc -static hello1.c 
hello1.c:3:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
    3 | main()
      | ^~~~
$ ls -l a.out 
-rwxrwxr-x 1 lqs lqs 871896 6月   9 14:18 a.out
$ size a.out 
   text    data     bss     dec     hex filename
 762417   20804    6016  789237   c0af5 a.out
$ strip a.out 
$ ls -l a.out 
-rwxrwxr-x 1 lqs lqs 798480 6月   9 14:18 a.out
$ size a.out 
   text    data     bss     dec     hex filename
 762417   20804    6016  789237   c0af5 a.out
$ gcc hello1.c 
hello1.c:3:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
    3 | main()
      | ^~~~
$ ls -l a.out 
-rwxrwxr-x 1 lqs lqs 16696 6月   9 14:18 a.out
$ size a.out 
   text    data     bss     dec     hex filename
   1566     600       8    2174     87e a.out
$ strip a.out 
$ ls -l a.out 
-rwxrwxr-x 1 lqs lqs 14472 6月   9 14:19 a.out
$ size a.out 
   text    data     bss     dec     hex filename
   1566     600       8    2174     87e a.out

7.9
没有使用共享库时，可执行文件的大部分都被标准I/O库所占用。

7.10
这段代码不正确。因为在自动变量val已经不存在之后，代码还通过指针引用这个已经不存在的自动变量。自动变量val在复合语句开始的左花括号之后声明了，但当该复合语句结束时，即在匹配的右花括号之后，自动变量就不存在了。
