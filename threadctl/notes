#include <pthread.h>
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_destroy(pthread_attr_t *attr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_attr_getdetachstate(const pthread_attr_t *restrict attr, int *detachstate);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int *detachstate);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_attr_getstack(const pthread_attr_t *restrict attr, void **restrict stackaddr, size_t *restrict stacksize);
int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_attr_getstacksize(const pthread_attr_t *restrict attr, size_t *restrict stacksize);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_attr_getguardsize(const pthread_attr_t *restrict attr, size_t *restrict guardsize);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
两个函数的返回值：若成功，返回0；否则，返回错误编号

#include <pthread.h>
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_mutexattr_getshared(const pthread_mutexattr_t *restrict attr, int *restrict pshared);
int pthread_mutexattr_setshared(pthread_mutexattr_t *attr, int pshared);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_mutexattr_getrobust(const pthread_mutexattr_t *restrict attr, int *restrict robust);
int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr, int robust);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_mutexattr_getconsistent(pthread_mutex_t *mutex);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict attr, int *restrict type);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_rwlockattr_getshared(const pthread_rwlockattr_t *restrict attr, int *restrict pshared);
int pthread_rwlockattr_setshared(pthread_rwlockattr_t *attr, int pshared);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_condattr_destroy(pthread_condattr_t *attr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_condattr_getshared(const pthread_condattr_t *restrict attr, int *restrict pshared);
int pthread_condattr_setshared(pthread_condattr_t *attr, int pshared);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_condattr_getclock(const pthread_condattr_t *restrict attr, clockid_t *restrict clock_id);
int pthread_condattr_setclock(pthread_condattr_t *attr, clockid_t clock_id);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_barrierattr_init(pthread_barrierattr_t *attr);
int pthread_barrierattr_destroy(pthread_barrierattr_t *attr);
两个函数的返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_barrierattr_getshared(const pthread_barrierattr_t *restrict attr, int *restrict pshared);
int pthread_barrierattr_setshared(pthread_barrierattr_t *attr, int pshared);
两个函数的返回值：若成功，返回0；否则，返回错误编号

#include <stdio.h>
int ftrylockfile(FILE *fp);
返回值：若成功，返回0；若不能获取锁，返回非0数值
void flockfile(FILE *fp);
void funlockfile(FILE *fp);
#include <stdio.h>
int getchar_unlocked(void);
int getc_unlocked(FILE *fp);
两个函数的返回值：若成功，返回下一个字符；若遇到文件尾或者出错，返回EOF
int putchar_unlocked(int c);
int putc_unlocked(int c, FILE *fp);
两个函数的返回值：若成功，返回c；若出错，返回EOF

#include <pthread.h>
int pthread_key_create(pthread_key_t *keyp, void (*destructor)(void *));
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
int pthread_key_delete(pthread_key_t key);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
pthread_once_t initflag = PTHREAD_ONCE_INIT;
int pthread_once(pthread_once_t *initflag, void (*initfn)(void));
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
void *pthread_getspecific(pthread_key_t key);
返回值：线程特定数据值；若没有值与该键关联，返回NULL
int pthread_setspecific(pthread_key_t key, const void *value);
返回值：若成功，返回0；否则，返回错误编号

#include <pthread.h>
int pthread_setcancelstate(int state, int *oldstate);
返回值：若成功，返回0；否则，返回错误编号
#include <pthread.h>
void pthread_testcancel(void);
#include <pthread.h>
int pthread_setcanceltype(int type, int *oldtype);
返回值：若成功，返回0；否则，返回错误编号

#include <signal.h>
int pthread_sigmask(int how, const sigset_t *restrict set, sigset_t *restrict oset);
返回值：若成功，返回0；否则，返回错误编号
#include <signal.h>
int sigwait(const sigset_t *restrict set, int *restrict signop);
返回值：若成功，返回0；否则，返回错误编号
#include <signal.h>
int pthread_kill(pthread_t thread, int signo);
返回值：若成功，返回0；否则，返回错误编号

#include <pthread.h>
int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void));
返回值：若成功，返回0；否则，返回错误编号
