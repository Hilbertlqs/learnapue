#include <sys/stat.h>
int stat(const char *restrict pathname, struct stat *restrict buf);
int fstat(int fd, struct stat *buf);
int lstat(const char *restrict pathname, struct stat *restrict buf);
int fstatat(int fd, const char *restrict pathname, struct stat *restrict buf, int flag);
所有4个函数的返回值：若成功，返回0；若出错，返回-1
一旦给出pathname，stat函数将返回与此命名文件有关的信息结构。fstat函数获得已在描述符fd上打开文件的有关信息。lstat函数类似于stat，但是当命名的文件是一个符号链接时，1stat返回该符号链接的有关信息，而不是由该符号链接引用的文件的信息。
fstatat函数为一个相对于当前打开目录(由fd参数指向)的路径名返回文件统计信息。flag参数控制着是否跟随着一个符号链接。当AT_SYMLINK_NOFOLLOW标志被设置时，fstatat不会跟随符号链接，而是返回符号链接本身的信息。否则，在默认情况下，返回的是符号链接所指向的实际文件的信息。如果fd参数的值是AT_FDCWD，并且pathname参数是一个相对路径名，fstatat会计算相对于当前目录的pathname参数。如果pathname是一个绝对路径，fd参数就会被忽略。这两种情况下，根据flag的取值，fstatat的作用就跟stat或1stat一样。
第2个参数buf是一个指针，它指向一个我们必须提供的结构。函数来填充由 buf指向的结构。结构的实际定义可能随具体实现有所不同。

宏的参数：stat结构中的st_mode成员
宏            文件类型
S_ISREG()     普通文件
S_ISDIR()     目录文件
S_ISCHR()     字符特殊文件
S_ISBLK()     块特殊文件
S_ISFIFO()    管道或FIFO
S_ISLNK()     符号链接
S_ISSOCK()    套接字
在<sys/stat.h>中的文件类型宏

POSIX.1允许实现将进程间通信(IPC)对象说明为文件。IPC类型宏可用来从stat结构中确定IPC对象的类型。
宏的参数：指向stat结构的指针
宏             对象的类型
S_TYPEISMQ()   消息队列
S_TYPEISSEM()  信号量
S_TYPEISSHM()  共享存储对象
在<sys/stat.h>中的IPC类型宏

早期的UNIX版本并不提供S_ISxxx宏，于是就需要将st_mode与屏蔽字S_IFMT进行逻辑“与”运算，然后与名为S_IFxxx的常量相比较。大多数系统在文件<sys/stat.h>中定义了此屏字和相关的常量。如若查看此文件，则可找到S_ISDIR宏定义为:
#define S_ISDIR (mode) (((mode) & S_IFMT) == S_IFDIR)

实际用户ID        我们实际上是谁
实际组IP
有效用户ID        用于文件访问权限检查
有效组ID
附属ID
保存的设置用户ID  由exec函数保存
保存的设置组ID
与每个进程关联的用户ID和组ID
实际用户ID和实际组ID标识我们究竟是谁。这两个字段在登录时取自口令文件中的登录项。通常，在一个登录会话期间这些值并不改变，但是超级用户进程有方法改变它们。
有效用户ID、有效组ID以及附属组ID决定了我们的文件访问权限。
保存的设置用户ID和保存的设置组ID在执行一个程序时包含了有效用户ID和有效组ID的副本。
通常，有效用户ID等于实际用户ID，有效组ID等于实际组ID。
每个文件有一个所有者和组所有者，所有者由stat结构中的st_uid指定，组所有者则由st_gid指定。
当执行一个程序文件时，进程的有效用户ID通常就是实际用户ID，有效组ID通常是实际组ID。但是可以在文件模式字(st_mode)中设置一个特殊标志，其含义是“当执行此文件时，将进程的有效用户ID设置为文件所有者的用户ID(st_uid)”。与此相类似，在文件模式字中可以设置另一位，它将执行此文件的进程的有效组ID设置为文件的组所有者(st_gid)。在文件模式字中的这两位被称为设置用户ID(set-user-ID)位和设置组ID(set-group-ID)位。
例如，若文件所有者是超级用户，而且设置了该文件的设置用户ID位，那么当该程序文件由一个进程执行时，该进程具有超级用户权限。不管执行此文件的进程的实际用户ID是什么，都会是这样。例如，UNIX系统程序passwd(1)允许任一用户改变其口令，该程序是一个设置用户ID程序。因为该程序应能将用户的新口令写入口令文件中(一般是/etc/passwd或/etc/shadow)，而只有超级用户才具有对该文件的写权限，所以需要使用设置用户ID功能。因为运行设置用户ID程序的进程通常会得到额外的权限，所以编写这种程序时要特别谨慎。
再回到stat函数，设置用户ID位及设置组ID位都含在文件的st_mode值中。这两位可分别用常量S_ISUID和S_ISGID测试。

每个文件有9个访问权限位，可将它们分成3类。
st_mode屏蔽  含义
S_IRUSR      用户读
S_IWUSR      用户写
S_IXUSR      用户执行
S_IRGRP      组读
S_IWGRP      组写
S_IXGRP      组执行
S_IROTH      其他读
S_IWOTH      其他写
S_IXOTH      其他执行
9个访问权限位，取自<sys/stat.h>
3类访限(即读、写及执行)以各种方式由不同的函数使用。我们将这些不同的使用方式汇总在下面。当说明相关函数时，再进一步讨论。
第一个规则是，我们用名字打开任一类型的文件时，对该名字中包含的每一个目录，包括它可能隐含的当前工作目录都应具有执行权限。这就是为什么对于目录其执行权限位常被称为搜索位的原因。
例如，为了打开文件/usr/include/stdio.h，需要对目录/、/usr和/usr/include具有执行权限。然后，需要具有对文件本身的适当权限，这取决于以何种模式打开它(只读、读-写等)。
如果当前目录是/usr/include，那么为了打开文件 stdio.h，需要对当前目录有执行权限。这是隐含当前目录的一个示例。打开stdio.h文件与打开./stdio.h作用相同。
注意，对于目录的读权限和执行权限的意义是不相同的。读权限允许我们读目录，获得在该目录中所有文件名的列表。当一个目录是我们要访问文件的路径名的一个组成部分时，对该目录的执行权限使我们可通过该目录(也就是搜索该目录，寻找一个特定的文件名)。引用隐含目录的另一个例子是，如果PATH环境变量指定了一个我们不具有执行权限的目录，那么shel1绝不会在该目录下找到可执行文件。
对于一个文件的读权限决定了我们是否能够打开现有文件进行读操作。这与open函数的O_RDONLY和O_RDWR标志相关。
对于一个文件的写权限决定了我们是否能够打开现有文件进行写操作。这与open函数的O_WRONLY和O_RDWR标志相关。
为了在open函数中对一个文件指定O_TRUNC标志，必须对该文件具有写权限。
为了在一个目录中创建一个新文件，必须对该目录具有写权限和执行权限。
为了删除一个现有文件，必须对包含该文件的目录具有写权限和执行权限。对该文件本身则不需要有读、写权限。
如果用7个exec函数(见8.10 节)中的任何一个执行某个文件，都必须对该文件具有执行权限。该文件还必须是一个普通文件。
进程每次打开、创建或删除一个文件时，内核就进行文件访问权限测试，而这种测试可能涉及文件的所有者(st_uid和s_gid)、进程的有效ID(有用户ID和有效组ID)以及进程的附属组ID(若支持的话)。两个所有者ID是文件的性质，而两个有效ID和附属组ID则是进程的性质。内核进行的测试具体如下。
(1)若进程的有效用户ID是0(超级用户)，则允许访问。这给予了超级用户对整个文件系统进行处理的最充分的自由。
(2)若进程的有效用户ID等于文件的所有者ID(也就是进程拥有此文件)，那么如果所有者适当的访问权限位被设置，则允许访问；否则拒绝访问。适当的访问权限位指的是，若进程为读而打开该文件，则用户读位应为1；若进程为写而打开该文件，则用户写位应为1；若进程将执行该文件，则用户执行位应为1。
(3)若进程的有效组ID或进程的附属组ID之一等于文件的组ID，那么如果组适当的访问权限位被设置，则允许访问；否则拒绝访问。
(4)若其他用户适当的访问权限位被设置，则允许访问；否则拒绝访问。
按顺序执行这4步。注意，如果进程拥有此文件(第2步)，则按用户访问权限批准或拒绝该进程对文件的访问一一不查看组访问权限。类似地，若进程并不拥有该文件。但进程属于某个适当的组，则按组访问权限批准或拒绝该进程对文件的访问一一不查看其他用户的访问权限。

在第3章中讲述用open或creat创建新文件时，我们并没有说明赋予新文件的用户ID和组ID是什么。关于新目录的所有权规则与本节将说明的新文件所有权规则相同。
新文件的用户ID设置为进程的有效用户ID。关于组ID，POSIX.1允许实现选择下列之一作为新文件的组ID。
(1)新文件的组ID可以是进程的有效组ID。
(2)新文件的组ID可以是它所在目录的组ID。
FreeBSD 8.0和Mac 0S X 10.6.8总是使用目录的组ID作为新文件的组ID。有些Linux文件系统使用mount(1)命今选项允许在POSIX.1提出的两种选项中进行选择。对于Linux 3.2.0和Solaris 10，默认情况下，新文件的组ID取决于它所在的目录的设置组ID位是否被设置。如果该目录的这一位已经被设置，则新文件的组ID设置为目录的组ID；否则新文件的组ID设置为进程的有效组ID。
使用POSIX.1所允许的第二个选项(继承目录的组ID)使得在某个目录下创建的文件和目录都具有该目录的组ID。于是文件和目录的组所有权从该点向下传递。例如在Linux的/var/mail目录中就使用了这种方法。
正如前面提到的，这种设置组所有权的方法是FreeBSD 8.0和Mac OS X 10.6.8系统默认的，但对于Linux和Solaris则是可选的。在Linux 3.2.0和Solaris 10之下，必须使设置组ID位起作用。更进一步，为使这种方法能够正常工作，mkdir函数要自动地传递一个目录的设置组ID位。

正如前面所说，当用open函数打开一个文件时，内核以进程的有效用户ID和有效组ID为基础执行其访问权限测试。有时，进程也希望按其实际用户ID和实际组ID来测试其访问能力。例如，当一个进程使用设置用户ID或设置组ID功能作为另一个用户(或组)运行时，就可能会有这种需要。即使一个进程可能已经通过设置用户ID以超级用户权限运行，它仍可能想验证其实际用户能否访问一个给定的文件。access和faccessat函数是按实际用户ID和实际组ID进行访问权限测试的。(该测试也分成4步，这与4.5 节中所述的一样，但将有效改为实际。)
#include <unistd.h>
int access(const char *pathname, int mode);
int faccessat(int fd, const char *pathname, int mode, int flag);
两个函数的返回值：若成功，返回0；若出错，返回-1
其中，如果测试文件是否已经存在，mode就为F_OK；否则mode是所列常量的按位或。
mode  说明
R_OK  测试读权限
W_OK  测试写权限
X_OK  测试执行权限
access函数的mode标志，取自<unistd.h>
faccessat函数与access函数在下面两种情况下是相同的：一种是pathname参数为绝对路径，另一种是fd参数取值为AT_FDCWD而pathname参数为相对路径。否则，faccessat计算相对于打开目录(由fd参数指向)的pathname。
flag参数可以用于改变faccessat的行为，如果flag设置为AT_EACCESS，访问检查用的是调用进程的有效用户ID和有效组ID，而不是实际用户ID和实际组ID。
access.c:
$ sudo passwd root
[sudo] password for lqs: 
New password: 
Retype new password: 
passwd: password updated successfully
$ su
Password: 
# exit
exit
$ cd build/filedir/
$ ls -l access 
-rwxrwxr-x 1 lqs lqs 17584 4月  23 14:08 access
$ ./access access 
read access OK
open for reading OK
$ ls -l /etc/shadow
-rw-r----- 1 root shadow 1720 4月  23 14:11 /etc/shadow
$ ./access /etc/shadow
access error for /etc/shadow: Permission denied
open error for /etc/shadow: Permission denied
$ su
Password: 
# chown root access 
# chmod u+s access 
# ls -l access 
-rwsrwxr-x 1 root lqs 17584 4月  23 14:08 access
# exit
exit
$ ./access /etc/shadow
access error for /etc/shadow: Permission denied
open for reading OK

至此我们已说明了与每个文件相关联的9个访问权限位，在此基础上我们可以说明与每个进程相关联的文件模式创建屏蔽字。
umask函数为进程设置文件模式创建屏蔽字，并返回之前的值。(这是少数几个没有出错返回函数中的一个。)
#include <sys/stat.h>
mode t umask(mode t cmask);
返回值:之前的文件模式创建屏蔽字
其中，参数cmask是列出的9个常量(S_IRUSR、S_IWUSR等)中的若干个按位“或”构成的。
在进程创建一个新文件或新目录时，就一定会使用文件模式创建屏蔽字(open和creat函数，这两个函数都有一个参数mode，它指定了新文件的访问权限位)。在文件模式创建屏蔽字中为1的位，在文件mode中的相应位一定被关闭。
$ umask
0002
$ ./umask 
$ ls -l foo bar
-rw------- 1 lqs lqs 0 4月  23 15:19 bar
-rw-rw-rw- 1 lqs lqs 0 4月  23 15:19 foo
$ umask
0002
在前面的示例中，我们用shell的umask命令在运行程序的前后打印文件模式创建屏蔽字。从中可见，更改进程的文件模式创建屏蔽字并不影响其父进程(常常是shel1)的屏蔽字。所有shell都有内置umask命令，我们可以用该命令设置或打印当前文件模式创建屏蔽字。

#include <sys/stat.h>
int chmod(const char *pathname, mode_t mode);
int fchmod(int fd, mode_t mode);
int fchmodat(int fd, const char *pathname, mode_t mode, int flag);
3个函数返回值：若成功，返回0；若出错，返回-1
chmod函数在指定的文件上进行操作，而fchmod函数则对已打开的文件进行操作。fchmodat函数与chmod函数在下面两种情况下是相同的：一种是pathname参数为绝对路径，另一种是fd参数取值为AT_FDCWD而pathname参数为相对路径。否则，fchmodat计算相对于打开目录(由fd参数指向)的pathname。flag参数可以用于改变fchmodat的行为，当设置了AT_SYMLINK_NOFOLLOW标志时，fchmodat并不会跟随符号链接。
为了改变一个文件的权限位，进程的有效用户ID必须等于文件的所有者ID，或者该进程必须具有超级用户权限。
参数mode是所示常量的按位或。
mode        说明
S_ISUID     执行时设置用户ID
S_ISGID     执行时设置组ID
S_ISVTX     保存正文(粘着位)
S_IRWXU     用户(所有者)读、写和执行
   S_IRUSR  用户(所有者)读
   S_IWUSR  用户(所有者)写
   S_IXUSR  用户(所有者)执行
S_IRWXG     组读、写和执行
   S_IRGRP  组读
   S_IWGRP  组写
   S_IXGRP  组执行
S_IRWXO     其他读、写执行
   S_IROTH  其他读
   S_IWOTH  其他写
   S_IXOTH  其他执行
chmod函数的mode常量，取自<sys/stat.h>
注意，有9项是取自9个文件访问权限位。我们另外加了6个，它们是两个设置ID常量(S_ISUID和S_ISGID)、保存正文常量(S_ISVTX)以及3个组合常量(S_IRWXU、S_IRWXG和S_IRWXO)。
保存正文位(S_ISVTX)不是POSIX.1的一部分，在Single UNIX Specification中，它被定义在XSI扩展中。
$ ./changemod 
$ ls -l foo bar
-rw-r--r-- 1 lqs lqs 0 4月  23 17:39 bar
-rw-rwSrw- 1 lqs lqs 0 4月  23 17:39 foo
注意，1s命令将组执行权限表示为S，它表示设置组ID位已经设置，同时，组执行位未设置。
最后还要注意，在运行程序后，ls命令列出的时间和日期并没有改变。chmod函数更新的只是i节点最近一次被更改的时间。按系统默认方式，ls -l列出的是最后修改文件内容的时间。

如果两个参数owner或group中的任意一个是-1，则对应的ID不变。
#include <unistd.h>
int chown(const char *pathname, uid_t owner, gid_t group);
int fchown(int fd, uid_t owner, gid_t group);
int fchownat(int fd, const char *pathname, uid_t owner, gid_t group, int flag);
int lchown(const char *pathname, uid_t owner, gid_t group);
4个函数的返回值：若成功，返回0；若出错，返回-1
除了所引用的文件是符号链接以外，这4个数的操作类似。在符号链接情况下，lchown和fchownat(设置了AT_SYMLINK_NOFOLLOW标志)更改符号链接本身的所有者，而不是该符号链接所指向的文件的所有者。
fchown函数改变参数fd指向的打开文件的所有者，既然它在一个已打开的文件上操作，就不能用于改变符号链接的所有者。
fchownat函数与chown或者1chown函数在下面两种情况下是相同的:一种是pathname参数为绝对路径，另一种是参数取值为AT_FDCWD而pathname参数为相对路径。在这两种情况下，如果flag参数中设置了AT_SYMLINK_NOFOLLOW标志，fchownat与lchown行为相同，如果flag参数中清除了AT_SYMLINK_NOFOLLOW标志，则fchownat与chown行为相同。如果fd参数设置为打开目录的文件描述符，并且pathname参数是一个相对路径名，fchownat函数计算相对于打开目录的pathname。

stat结构成员st_size表示以字节为单位的文件的长度。此字段只对普通文件、目录文件和符号链接有意义。
对于普通文件，其文件长度可以是0，在开始读这种文件时，将得到文件结束(end-of-file)指示。对于目录，文件长度通常是一个数(如16或512)的整数倍。
对于符号链接，文件长度是在文件名中的实际字节数。
(注意，因为符号链接文件长度总是由st_size指示，所以它并不包含通常C语言用作名字结尾的null字节。)
现今，大多数现代的UNIX系统提供字段st_blksize和st_blocks。其中，第一个是对文件I/O较合适的块长度，第二个是所分配的实际512字节块块。当我们将st_blksize用于读操作时，读一个文件所的时间量最少。为了提高效率，标准I/0库也试图一次读、写st_blksize个字节。
应当了解的是，不同的UNIX版本其st_blocks所用的单位可能不是512字节的块。使用此值并不是可移植的。

有时我们需要在文件尾端处截去一些数据以缩短文件。将一个文件的长度截断为0是一个特例，在打开文件时使用O_TRUNC标志可以做到这一点。为了截断文件可以调用函数truncate和ftruncate。
#include <unistd.h>
int truncate(const char *pathname, off_t length);
int ftruncate(int fd, off_t length);
两个函数的返回值：若成功，返回0；若出错，返回-1
这两个函数将一个现有文件长度截断为length。如果该文件以前的长度大于length，则超过length以外的数据就不再能访问。如果以前的长度小于length，文件长度将增加，在以前的文件尾端和新的文件尾端之间的数据将读作0(也就是可能在文件中创建了一个空洞)。

任何一个文件可以有多个目录项指向其i节点。创建一个指向现有文件的链接的方法是使用link函数或linkat函数。
#include <unistd.h>
int link(const char *existingpath, const char *newpath);
int linkat(int efd, const char *existingpath, int nfd, const char *newpath, int flag);
两个函数的返回值：若成功，返回0；若出错，返回-1
这两个函数创建一个新目录项newpath，它引用现有文件existingpath。如果newpath已经存在，则返回出错。只创建newpath中的最后一个分量，路径中的其他部分应当已经存在。
对于linkat函数，现有文件是通过efd和existingpath参数指定的，新的路径名是通过nfd和newpath参数指定的。默认情况下，如果两个路径名中的任一个是相对路径，那么它需要通过相对于对应的文件描述符进行计算。如果两个文件描述符中的任一个设置为AT_FDCWD，那么相应的路径名(如果它是相对路径)就通过相对于当前目录进行计算。如果任一路径名是绝对路径，相应的文件描述符参数就会被忽略。
当现有文件是符号链接时，由flag参数来控制1inkat函数是创建指向现有符号链接的链接还是创建指向现有符号链接所指向的文件的链接。如果在flag参数中设置了AT_SYMLINK_FOLLOW标志，就创建指向符号链接目标的链接。如果这个标志被清除了，则创建一个指向符号链接本身的链接。
创建新目录项和增加链接计数应当是一个原子操作。
虽然POSIX.1允许实现支持跨越文件系统的链接，但是大多数实现要求现有的和新建的两个路径名在同一个文件系统中。如果实现支持创建指向一个目录的硬链接，那么也仅限于超级用户才可以这样做。其理由是这样做可能在文件系统中形成循环，大多数处理文件系统的实用程序都不能处理这种情况。因此，很多文件系统实现不允许对于目录的硬链接。
为了删除一个现有的目录项，可以调用unlink函数
#include <unistd.h>
int unlink(const char *pathrame);
int unlinkat(int fd, const char *pathname, int flag);
两个函数的返回值：若成功，返回0；若出错，返回-1
这两个函数删除目录项，并将由pathname所引用文件的链接计数减1。如果对该文件还有其他链接，则仍可通过其他链接访问该文件的数据。如果出错，则不对该文件做任何更改。
只有当链接计数达到0时，该文件的内容才可被删除。另一个条件也会阻止删除文件的内容一一只要有进程打开了该文件，其内容也不能删除。关闭一个文件时，内核首先检查打开该文件的进程个数；如果这个计数达到0，内核再去检查其链接计数；如果计数也是0，那么就删除该文件的内容。
如果pathname参数是相对路径名，那么unlinkat函数计算相对于由fd文件描述符参数代表的目录的路径名。如果fd参数设置为AT_FDCWD，那么通过相对于调用进程的当前工作目录来计算路径名。如果pathname参数是绝对路径名，那么fd参数被忽略。
flag参数给出了一种方法使调用进程可以改变unlinkat函数的默认行为。当AT_REMOVEDIR标志被设置时，unlinkat函数可以类似于rmdir一样删除目录。如果这个标志被清除，unlinkat与unlink执行同样的操作。
unlink的这种特性经常被程序用来确保即使是在程序崩溃时，它所创建的临时文件也不会遗留下来。进程用open或creat创建一个文件，然后立即调用unlink，因为该文件仍旧是打开的，所以不会将其内容删除。只有当进程关闭该文件或终止时(在这种情况下，内核关闭该进程所打开的全部文件)，该文件的内容才被删除。
如果pathname是符号链接，那么unlink删除该符号链接而不是删除由该链接所引用的文件。给出符号链接名的情况下，没有一个函数能删除由该链接所引用的文件。
如果文件系统支持的话，超级用户可以调用unlink，其参数pathname指定一个目录，但是通常应当使用rmdir函数，而不使用unlink这种方式。
我们也可以用remove函数解除对一个文件或目录的链接。对于文件，remove的功能与unlink相同。对于目录，remove的功能与rmdir相同。
#include <stdio.h>
int remove(const char *pathname);
返回值：若成功，返回0；若出错，返回-1
ISO C指定remove函数删除一个文件，这更改了UNIX历来使用的名字unlink，其原因是实现C标准的大多数非UNIX系统并不支持文件链接。

文件或目录可以用rename函数或者renameat函数进行重命名。
#include <stdio.h>
int rename(const char *oldname, const char *newname);
int renameat(int oldfd, const char *oldname, int newfd, const char *newname);
两个函数的返回值：若成功，返回0；若出错，返回-1
ISO C对文件定义了rename函数(C标准不处理目录)。POSIX.1扩展此定义，使其包含了目录和符号链接。
根据oldname是指文件、目录还是符号链接，有几种情况需要加以说明。我们也必须说明如果newname已经存在时将会发生什么。
(1)如果oldname指的是一个文件而不是目录，那么为该文件或符号链接重命名。在这种情况下，如果newname已存在，则它不能引用一个目录。如果newname已存在，而且不是一个目录，则先将该目录项删除然后将oldname重命名为newname。对包含oldname的目录以及包含newname的目录，调用进程必须具有写权限，因为将更改这两个目录。
(2)如若oldname指的是一个目录，那么为该目录重命名。如果newname已存在，则它必须引用一个目录，而且该目录应当是空目录(空目录指的是该目录中只有.和..项)。如果newname存在(而且是一个空目录)，则先将其删除，然后将oldname重命名为newname。另外，当为一个目录重命名时，newname不能包含oldname作为其路径前缀。例如，不能将/usr/foo重命名为/usr/foo/testdir，因为旧名字(/usr/foo)是新名字的路径前缀，因而不能将其删除。
(3)如若oldname或newname引用符号链接，则处理的是符号链接本身，而不是它所引用的文件。
(4)不能对.和..重命名。更确切地说，.和..都不能出现在oldname和newname的最后部分。
(5)作为一个特例，如果oldname和newname引用同一文件，则函数不做任何更改而成功返回。
如若newname已经存在，则调用进程对它需要有写权限(如同删除情况一样)。另外，调用进程将删除oldname目录项，并可能要创建newname目录项，所以它需要对包含oldrame及包含
newname的目录具有写和执行权限。
除了当oldname或newname指向相对路径名时，其他情况下renameat函数与rename函数功能相同。如果oldmame参数指定了相对路径，就相对于oldfd参数引用的目录来计算oldname。类似地，如果newname指定了相对路径，就相对于newfd引用的录来计算newname。oldfd或newfd参数(或两者)都能设置成AT_FDCWD，此时相对于当前目录来计算相应的路径名。

当使用以名字引用文件的函数时，应当了解该函数是否处理符号链接。也就是该函数是否跟随符号链接到达它所链接的文件。如若该函数具有处理符号链接的功能，则其路径名参数引用由符号链接指向的文件。否则，一个路径名参数引用链接本身，而不是由该链接指向的文件。没有列出mkdir、mkinfo、mknod和rmdir这些函数，其原因是，当路径名是符号链接时，它们都出错返回。以文件描述符作为参数的一些函数(如fstat、fchmod等)也未列出，其原因是，对符号链接的处理是由返回文件描述符的函数(通常是open)进行的。chown是否跟随符号链接取决于实现。在所有现代的系统中，chown函数都跟随符号链接。
函数     不跟随符号链接 跟随符号链接
access                       .
chdir                        .
chmod                        .
chown                        .
creat                        .
exec                         .
lchown          .
link                         .
lstat           .
open                         .
opendir                      .
pathconf                     .
readlink        .
remove          .
rename          .
stat                         .
truncate                     .
unlink          .
各个函数对符号链接的处理
一个例外是，同时用O_CREAT和O_EXCL两者调用open函数。在此情况下，若路径名引用符号链接，open将出错返回，errno设置为EEXIST。这种处理方式的意图是堵塞一个安全性漏洞，以防止具有特权的进程被诱骗写错误的文件。

可以用symlink或symlinkat函数创建一个符号链接。
#include <unistd.h>
int symlink(const char *actualpath, const char *sympath);
int symlinkat(const char *actualpath, int fd, const char *sympath);
两个函数的返回值：若成功，返回0；若出错，返回-1
函数创建了一个指向actualpath的新目录项sympath。在创建此符号链接时，并不要求actualpath已经存在。并且，actualpath和sympath并不需要位于同一文件系统中。
symlinkat函数与symlink函数类似，但sympath参数根据相对于打开文件描述符引用的目录(fd参数指定)进行计算。如果sympath指定的是绝对路径或者fd设置了AT_FDCWD值，那么symlinkat就等同于symlink函数。
因为open函数跟随符号链接，所以需要有一种方法打开该链接本身，并读该链接中的名字。readlink和readlinkat函数提供了这种功能。
#include <unistd.h>
ssize_t readlink(const char *restrict pathname, char *restrict buf, size_t bufsize);
ssize_t readlinkat(int fd, const char* restrict pathname, char *restrict buf, size_t bufsize);
两个函数的返回值：若成功，返回读取的字节数；若出错，返回-1
两个函数组合了open、read和close的所有操作。如果函数成功执行，则返回读入buf的字节数。在buf中返回的符号链接的内容不以null字节终止。
当pathname参数指定的是绝对路径名或者fd参数的值为AT_FDCWD，readlinkat函数的行为与readlink相同。但是，如果fd参数是一个打开目录的有效文件描述符并且pathname参数是相对路径名，则readlinkat计算相对于由fd代表的打开目录的路径名。

对每个文件维护3个时间字段，它们的意义。
字段    说明                    例子         1s(1)选项
st_atim 文件数据的最后访问时间  read         -u
st_mtim 文件数据的最后修改时间  write        默认
st_ctim i节点状态的最后更改时间 chmod、chown -c
与每个文件相关的3个时间值
注意，修改时间(st_mtim)和状态更改时间(st_ctim)之间的区别。修改时间是文件内容最后一次被修改的时间。状态更改时间是该文件的i节点最后一次被修改的时间。很多影响到i节点的操作，如更改文件的访问权限、更改用户ID、更改链接数等，但它们并没有更改文件的实际内容。因为i节点中的所有信息都是与文件的实际内容分开存放的，所以，除了要记录文件数据修改时间以外，还需要记录状态更改时间，也就是更改i节点中信息的时间。
注意，系统并不维护对一个i节点的最后一次访问时间，所以access和stat函数并不更改这3个时间中的任一个。
系统管理员常常使用访问时间来删除在一定时间范围内没有被访问过的文件。典型的例子是删除在过去一周内没有被访问过的名为a.out或core的文件。find(1)命常被用来进行这种类型的操作。
修改时间和状态更改时间可被用来归档那些内容已经被修改或节点已经被更改的文件。
1s命令按这3个时间值中一个排进行显示。系统默认(用-1或-t选项调用时)是按文件的修改时间的先后排序显示。-u选项使ls命令按访问时间排序，-c选项则使其按状态更改时间排序。
各种函数对这3个时间的作用。目录是包含目录项(文件名和相关的i节点编号)的文件，增加、删除或修改目录项会影到它所在目录相关的3个时间。这就是包含两列的原因，其中一列是与该文件(或目录)相关的3个时间，另一列是与所引用的文件(或目录)的父目录相关的3个时间。例如，创建一个新文件影响到包含此新文件的目录，也影响该新文件的i节点。但是，读或写一个文件只影响该文件的i节点，而对目录则无影响。
函数                        引用的文件或目录 所引用文件或目录的父目录 节   备注
                            a      m      c  a          m          c       
chmod、fchmod                             .                                
chown、fchown                             .                                
creat                       .      .      .             .          .       O_CREAT新文件
creat                              .      .                                O_TRUNC现有文件
exec                        .                                              
lchown                                    .                                
link                                      .             .          .       第二个参数的父目录
mkdir                       .      .      .             .          .       
mkfifo                      .      .      .             .          .       
open                        .      .      .             .          .       O_CREAT新文件
open                               .      .                                O_TRUNC现有文件
pipe                        .      .      .                                
read                        .                                              
remove                                    .             .          .       删除文件=unlink
remove                                                  .          .       删除目录=rmdir
rename                                    .             .          .       对于两个参数
rmdir                                                   .          .       
truncate、ftruncate                .      .                                
unlink                                    .             .          .       
utimes、utimensat、futimens .      .      .                                
write                              .      .                                

一个文件的访问和修改时间可以用以下几个函数更改。futimens和utimensat函数可以指定纳秒级精度的时间戳。用到的数据结构是与stat函数族相同的timespec结构。
#include <sys/stat.h>
int futimens(int fd, const struct timespec times[2]);
int utimensat(int fd, const char *pathname, const struct timespec times[2], int flag);
两个函数返回值：若成功，返回0；若出错，返回-1
这两个函数的times数组参数的第一个元素包含访问时间，第二元素包含修改时间。这两个时间值是日历时间，这是自特定时间(1970年1月1日00:00:00)以来所经过的秒数。不足秒的部分用纳秒表示。
时间戳可以按下列4种方式之一进行指定。
(1)如果times参数是一个空指针，则访问时间和修改时间两者都设置为当前时间。
(2)如果times参数指向两个timespec结构的数组，任一数组元素的tv_nsec字段的值为UTIME_NOW，相应的时间戳就设置为当前时间，忽略相应的tv_sec字段。
(3)如果times参数指向两个timespec结构的数组，任一数组元素的tv_nsec字段的值为UTIME_OMIT，相应的时间截保持不变，忽略相应的tv_sec字段。
(4)如果times参数指向两个timespec结构的数组，且tv_nsec字段的值为既不是UTIME_NOW也不是UTIME_OMIT，在这种情况下，相应的时间截设置为相应的tv_sec和tv_nsec字段的值。
执行这些函数所要求的优先权取决于times参数的值。
如果times是一个空指针，或者任一tv_nsec字段设为UTIME_NOW，则进程的有效用户ID必须等于该文件的所有者ID；进程对该文件必须具有写权限，或者进程是一个超级用户进程。
如果times是非空指针，并且任一tv_nsec字段的值既不是UTIME_NOW也不是UTIME_OMIT，则进程的有效用户ID必须等于该文件的所有者ID，或者进程必须是一个超级用户进程。对文件只具有写权限是不够的。
如果times是非空指针，并且两个nsec字段的值都为UTIME_OMIT，就不执行任何的权限检查。
futimens函数需要打开文件来更改它的时间，utimensat函数提供了一种使用文件名更改文件时间的方法。pathname参数是相对于fd参数进行计算的，fd要么是打开目录的文件描述符，要么设置为特殊值AT_FDCWD(强制通过相对于调用进程的当前目录计算pathname)。如果pathname指定了绝对路径，那么fd参数被忽略。utimensat的flag参数可用于进一步修改默认行为。如果设置了AT_SYMLINK_NOFOLLOW标志，则符号链接本身的时间就会被修改(如果路径名指向符号链接)。默认的行为是跟随符号链接，并把文件的时间改成符号链接的时间。
futimens和utimensat函数都包含在POSIX.1中，第3个函数utimes包含在Single UNIX Specification的XSI扩展选项中。
#include <sys/time.h>
int utimes(const char *pathname, const struct timeval times[2]);
函数返回值：若成功，返回0；若出错，返回-1
utimes函数对路径名进行操作。times参数是指向包含两个时间戳(访问时间和修改时间)元素的数组的指针，两个时间戳是用秒和微秒表示的。
struct timeval {
    time_t tv_sec; /* seconds */
    long tv_usec; /* microseconds */
};
注意，我们不能对状态更改时间t_ctim(i节点最近被修改的时间)指定一个值，因为调用utimes函数时，此字段会被自动更新。
在某些UNIX版本中，touch(1)命令使用这些函数中的某一个。另外，标准归档程序tar(1)和cpio(1)可选地调用这些函数，以便将一个文件的时间值设置为将它归档时保存的时间。

程序使用带O_TRUNC项的open函数将文件长度截断为0，并不更改其访问时间及修改时间。为了做到这一点，首先用stat函数得到这些时间，然后截断文件，最后再用futimens函数重置这两个时间。
$ ls -l build/filedir/changemod 
-rwxrwxr-x 1 lqs lqs 17624 5月   6 17:27 build/filedir/changemod
$ ls -lu build/filedir/changemod 
-rwxrwxr-x 1 lqs lqs 17624 5月   6 17:27 build/filedir/changemod
$ date
2023年 05月 06日 星期六 17:30:02 CST
$ ./build/filedir/zap build/filedir/changemod 
$ ls -l build/filedir/changemod 
-rwxrwxr-x 1 lqs lqs 0 5月   6 17:27 build/filedir/changemod
$ ls -lu build/filedir/changemod 
-rwxrwxr-x 1 lqs lqs 0 5月   6 17:27 build/filedir/changemod
$ ls -lc build/filedir/changemod 
-rwxrwxr-x 1 lqs lqs 0 5月   6 17:30 build/filedir/changemod
正如我们所预见的一样，最后修改时间和最后访问时间未变。但是，状态更改时间则更改为程序运行时的时间。

用mkdir和mkdirat函数创建目录，用rmdir函数删除目录。
#include <sys/stat.h>
int mkdir(const char *pathname, mode_t mode);
int mkdirat(int fd, const char *pathname, mode_t mode);
两个函数返回值：若成功，返回0；若出错，返回-1
这两个函数创建一个新的空目录。其中，.和..目录项是自动创建的。所指定的文件访问权限mode由进程的文件模式创建屏蔽字修改。
常见的错误是指定与文件相同的mode(只指定读、写权限)。但是，对于目录通常至少要设置一个执行权限位，以允许访问该目录中的文件名。
按照之前讨论的规则来设置新目录的用户ID和组ID。
mkdirat函数与mkdir函数类似。当fd参数具有特殊值AT_FDCWD或者pathname参数指定了绝对路径名时，mkdirat与mkdir完全一样。否则，fd参数是一个打开目录，相对路径名根据此打开目录进行计算。
用rmdir函数可以删除一个空目录。空目录是只包含.和..这两项的目录。
#include <unistd.h>
int rmdir(const char *pathname);
返回值：若成功，返回0；若出错，返回-1
如果调用此函数使目录的链接计数成为0，并且也没有其他进打开此目录，则释放由此目录占用的空间。如果在链接计数达到0时，有一个或多个进程打开此目录，则在此函数返回前删除最后一个链接及.和..项。另外，在此目录中不能再创建新文件。但是在最后一个进程关闭它之前并不释放此目录。(即使另一些进程打开该目录，它们在此目录下也不能执行其他操作。这样处理的原因是，为了使rmdir函数成功执行，该目录必须是空的。)

对某个目录具有访问权限的任一用户都可以读该目录，但是，为了防止文件系统产生混乱，只有内核才能写目录。一个目录的写权限位和执行权限位决定了在该目录中能否创建新文件以及删除文件，它们并不表示能否写目录本身。
目录的实际格式依赖于UNIX系统实现和文件系统的设计。早期的系统(如V7)有一个比较简单的结构：每个目录项是16个字节，其中14个字节是文件名，2个字节是i节点编号。而对于4.2BSD，由于它允许更长的文件名，所以每个目录项的长度是可变的。这就意味着读目录的程序与系统相关。为了简化读目录的过程，UNIX现在包含了一套与目录有关的例程，它们是POSIX.1的一部分。很多实现阻止应用程序使用read函数读取目录的内容，由此进一步将应用程序与目录格式中与实现相关的细节隔离。
#include <dirent.h>
DIR *opendir(const char *pathname);
DIR *fdopendir(int fd);
两个函数返回值：若成功，返回指针；若出错，返回NULL
struct dirent *readdir(DIR *dp);
返回值：若成功，返回指针；若在目录尾或出错，返回NULL
void rewinddir(DIR *dp);
int closedir(DIR *dp);
返回值：若成功，返回0；若出错，返回-1
long telldir(DIR *dp);
返回值：与dp关联的目录中的当前位置
void seekdir(DIR *dp, long loc);
fdopendir函数最早出现在SUSv4 (Single UNIX Specification 第4版)中，它提供了一种方法，可以把打开文件描述符转换成目录处理函数需要的DIR结构。
telldir和seekdir函数不是基本POSIX.1标准的组成部分。它们是Single UNIX Specification中的XSI扩展，所以可以期望所有符合UNIX系统的实现都会提供这两个函数。
定义在头文件<dirent.h>中的dirent结构与实现有关。实现对此结构所做的定义至少包含下列两个成员：
ino_t d_ino; /* i-node number */
char d_name[]; /* null-terminated filename */
POSIX.1并没有定义d_ino项，因为这是一个实现特征，但在POSIX.1的XSI扩展中定义了d_ino。POSIX.1在此结构中只定义了d_name项。
注意，d_name项的大小并没有指定，但必须保证它能包含至少NAME_MAX个字节(不包含终止null字节)。因为文件名是以null字节结束的，所以在头文件中如何定义数组d_name并无多大关系，数组大小并不表示文件名的长度。
DIR结构是一个内部结构，上述7个函数用这个内部结构保存当前正在被读的目录的有关信息。其作用类似于FILE结构。FILE结构由标准I/O库维护。
由opendir和fdopendir返回的指向DIR结构的指针由另外5个函数使用。opendir执行初始化操作，使第一个readdir返回目录中的第一个目录项。DIR结构由fdopendir创建时，readdir返回的第一项取决于传给fdopendir函数的文件描述符相关联的文件偏移量。注意，目录中各目录项的顺序与实现有关。它们通常并不按字母顺序排列。

每个进程都有一个当前工作目录，此目录是搜索所有相对路径名的起点(不以斜线开始的路径名为相对路径名)。当用户登录到UNIX系统时，其当前工作目录通常是口令文件(/etc/passwd)中该用户登录项的第6个字段一用户的起始目录(home directory)。当前工作目录是进程的一个属性，起始目录则是登录名的一个属性。
进程调用chdir或fchdir函数可以更改当前工作目录。
#include <unistd.h>
int chdir(const char *pathname);
int fchdir(int fd);
两个函数的返回值：若成功，返回0；若出错，返回-1
在这两个函数中，分别用pathname或打开文件描述符来指定新的当前工作目录。
因为当前工作目录是进程的一个属性，所以它只影响调用chdir的进程本身，而不影响其他进程。
$ pwd
/home/lqs/apue3e/learnapue/build/filedir
$ ./mycd 
chdir to /tmp succeeded
$ pwd
/home/lqs/apue3e/learnapue/build/filedir
从中可以看出，执行mycd命令的shell的当前工录并没有改变，这是shel1执行程序工作方式的一个副作用。每个程序运行在独立的进程中，shell的当前工作目录并不会随着程序调用chdir而改变。由此可见，为了改变shell进程自己的工作目录，shell应当直接调用chdir函数，为此，cd命令内建在shell中。

因为内核必须维护当前工作目录的信息，所以我们应能获取其当前值。遗憾的是，内核为每个进程只保存指向该目录v节点的指针等目录本身的信息，并不保存该目录的完整路径名。
我们需要一个函数，它从当前工作目录(.)开始，用..找到其上一级目录，然后读其目录项，直到该目录项中的i节点编号与工作目录i节点编号相同，这样地就找到了其对应的文件名。按照这种方法，逐层上移，直到遇到根，这样就得到了当前工作目录完整的绝对路径名。很幸运，函数getcwd就提供了这种功能。
#include <unistd.h>
char *getcwd(char *buf, size_t size);
返回值：若成功，返回buf；若出错，返回NULL
必须向此函数传递两个参数，一个是缓冲区地址buf，另一个是缓冲区的长度size(以字节为单位)。该缓冲区必须有足够的长度以容纳绝对路径名再加上一个终止null字节，否则返回出错。

注意，chdir跟随符号链接，但是当getcwd沿目录树上溯遇到/var/spool目录时，它并不了解该目录由符号链接/usr/spool所指向。这是符号链接的一种特性。
当一个应用程序需要在文件系统中返回到它工作的出发点时，getwd函数是有用的。在更换工作目录之前，我们可以调用getcwd函数先将其保存起来。在完成了处理后，就可将所保存的原工作目录路径名作为调用参数传送给chdir，这样就返回到了文件系统中的出发点。
fchdir函数向我们提供了一种完成此任务的便捷方法。在更换到文件系统中的不同位置前无需调用getcwd函数，而是使用open打开当前工作目录，然后保存其返回的文件描述符。当希望回到原工作目录时，只要简单地将该文件描述符传送给fchdir。

常量     说明        对普通文件的影响                                                    对目录的影响
S_ISUID  设置用户ID  执行时设置有效用户ID                                                (未使用)
S_ISGID  设组ID      若组执行位设置，则执行时设置有效组ID；否则使强制性锁起作用(若支持)  将在目录中创建的新文件的组ID设置为目录的组ID
S_ISVTX  粘着位      在交换区缓存程序正文(若支持)                                        限止在目录中删除和重命名文件
S IRUSR  用户读      许可用户读文件                                                      许可用户读目录项
S_IWUSR  用户写      许可用户写文件                                                      许可用户在目录中删除和创建文件
S_IXUSR  用户执行    许可用户执行文件                                                    许可用户在目录中搜索给定路径名
S_IRGRP  组读        许可组读文件                                                        许可组读目录项
S IWGRP  组写        许可组写文件                                                        许可组在目录中刑除和创建文件
S_IXGRP  组执行      许可组执行文件                                                      许可组在目录中搜案给定路径名
S_IROTH  其他读      许可其他读文件                                                      许可其他读目录项
S_IWOTH  其他写      许可其他写文件                                                      许可其他在目录中删除和创建文件
S_IXOTH  其他执行    许可其他执行文件                                                    许可其他在目录中搜索给定路径名
文件访问权限位小结
最后9个常量还可以分成如下3组:
S_IRWXU = S_IRUSR | IS_IWUSR | IS_IXUSR
S_IRWXG = S_IRGRP | IS_IWGRP | IS_IXGRP
S_IRWXO = S_IROTH | IS_IWOTH | IS_IXOTH
