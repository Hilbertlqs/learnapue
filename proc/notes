#include <unistd.h>
pid_t getpid(void);
返回值：调用进程的进程ID
pid_t getppid(void);
返回值：调用进程的父进程ID
uid_t getuid(void);
返回值：调用进程的实际用户ID
uid_t geteuid(void);
返回值：调用进程的有效用户ID
gid_t getgid(void);
返回值：调用进程的实际组ID
gid_t getegid(void);
返回值：调用进程的有效组ID

#include <unistd.h>
pid_t fork(void);
返回值：子进程返回0，父进程返回子进程ID；若出错，返回-1

#include <sys/wait.h>
pid_t wait(int *statloc);
pid_t waitpid(pid_t pid, int *statloc, int options);
两个函数返回值：若成功，返回进程ID；若出错，返回0(见后面的说明)或-1

#include <sys/wait.h>
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
返回值：若成功，返回0；若出错，返回-1

#include <sys/types.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>
pid_t wait3(int *statloc, int options, struct rusage *rusage);
pid_t wait4(pid_t pid, int *statloc, int options, struct rusage *rusage);
两个函数返回值：若成功，返回进程ID；若出错，返回-1

#include <unistd.h>
int execl(const char *pathname, const char *arg0, ... /* (char *)0 */ );
int execv(const char *pathname, char *const argv[]);
int execle(const char *pathname, const char *arg0, ... /* (char *)0, char *const envp[] */ );
int execve(const char *pathname, char *const argv[], char *const envp[]);
int execlp(const char *filename, const char *arg0, ... /* (char *)0 */ );
int execvp(const char *filename, char *const argv[]);
int fexecve(int fd, char *const argv[], char *const envp[]);
7个函数返回值：若出错，返回-1；若成功，不返回

#include <unistd.h>
int setuid(uid_t uid);
int setgid(gid_t gid);
两个函数返回值：若成功，返回0；若出错，返回-1

#include <unistd.h>
int setreuid(uid_t ruid, uid_t euid);
int setregid(gid_t rgid, uid_t euid);
两个函数返回值：若成功，返回0；若出错，返回-1

#include <unistd.h>
int seteuid(uid_t uid);
int setegid(gid_t gid);
两个函数返回值：若成功，返回0；若出错，返回-1

#include <stdlib.h>
int system(const char *cmdstring);
返回值：(见下)
如果cmdstring是个空指针，则仅当命令处理程序可用时，system返回非0值，这一特征可以确定在一个给定的操作系统上是否支持system函数。在UNIX中，system总是可用的。
因为system在其实现中调用了fork、exec和waitpid，因此有3种返回值。
(1)fork失败或者waitpid返回除EINTR之外的出错，则system返回-1，并且设置errno以指示错误类型。
(2)如果exec失败(表示不能执行shell)，则其返回值如同shell执行了exit(127)一样。
(3)否则所有3个函数(fork、exec和waitpid)都成功，那么system的返回值是shell的终止状态，其格式已在waitpid中说明。
如果waitpid被一个捕捉到的信号中断，则某些早期的system实现都返回错误类型值EINTR。但是，因为没有可用的策略能让应用程序从这种错误类型中恢复(子进程的进程ID对调用者来说是未知的)。POSIX后来增加了下列要求:在这种情况下system不返回一个错误。

#include <unistd.h>
char *getlogin(void);
返回值：若成功，返回指向登录名字符串的指针；若出错，返回NULL

#include <unistd.h>
int nice(int incr);
返回值：若成功，返回新的nice值NZERO；若出错，返回-1
#include <sys/resource.h>
int getpriority(int which, id_t who);
返回值：若成功，返回-NZERO~NZERO-1之间的nice值；若出错，返回-1
#include <sys/resource.h>
int setpriority(int which, id_t who, int value);
返回值：若成功，返回0；若出错，返回-1

#include <sys/times.h>
clock_t times(struct tms *buf);
返回值：若成功，返回流逝的墙上时钟时间(以时钟滴答数为单位)；若出错，返回-1
